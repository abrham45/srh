import asyncio
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
from bot.models import UserSession, ChatMessage, Feedback
from bot.choices import choices_for_buttons, RATING_CHOICES
from bot.handlers.utils import should_ask_feedback, smart_truncate
from bot.prompting import build_gemini_context
from bot.gemini_api import ask_gemini
from bot.intent_classification import perform_intent_classification
from bot.emotion_detection import perform_emotion_detection
from bot.risk_assessment import perform_risk_assessment
from bot.myth_detection import perform_myth_detection
from bot.homosexuality_filter import should_reject_question

logger = logging.getLogger(__name__)

# Configuration constants
CHAT_HISTORY_LIMIT = 20  # Number of recent messages to include in context (10 user + 10 bot)
# Increased from 4 to 20 for much better conversation memory
# This allows the bot to remember and reference much more context

STATE_QUESTION = "question"
STATE_FEEDBACK = "feedback"
STATE_LANGUAGE = "language"
STATE_LANGUAGE_CHANGE = "language_change"
STATE_FAQ_SECTION = "faq_section"
STATE_FAQ_QUESTION = "faq_question"

START_OVER_BTN = {"en": "РџЎ№ИЈ Settings", "am": "РџЎ№ИЈ рЅЁріЋрЅЦрѕГ"}
NEW_CHAT_BTN = {"en": "Рюе Start New Chat", "am": "Рюе ріарІ▓рѕх рІЇрІГрІГрЅх рїђрѕЮрѕГ"}
FAQ_BTN = {"en": "­ЪњГ FAQ & Help", "am": "­ЪњГ рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй"}
HELP_BTN = {"en": "­ЪњГ FAQ & Help", "am": "­ЪњГ рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй"}
END_CHAT_BTN = {"en": "­Ъџф Exit Chat", "am": "­Ъџф рІЇрІГрІГрЅх рІЇрїБ"}
MENU_BTNS = {
    "en": [
        ["Рюе Start New Chat"], 
        ["­ЪњГ FAQ & Help", "РџЎ№ИЈ Settings"], 
        ["­Ъџф Exit Chat"]
    ],
    "am": [
        ["Рюе ріарІ▓рѕх рІЇрІГрІГрЅх рїђрѕЮрѕГ"], 
        ["­ЪњГ рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй", "РџЎ№ИЈ рЅЁріЋрЅЦрѕГ"], 
        ["­Ъџф рІЇрІГрІГрЅх рІЇрїБ"]
    ]
}
FEEDBACK_PROMPT = {
    "en": "I hope that helped! Your feedback helps me improve and support others better. In order to continue please provide us with feedback. How would you rate the answer you just received?",
    "am": "ріЦріЋрІ░рѕерІ│рІјрЅх рЅ░рѕхрЇІ ріарІ░рѕГрїІрѕѕрѕЂ! рІеріЦрѕГрѕхрІј ріарѕхрЅ░рІФрІерЅх рѕФрѕ┤ріЋ ріЦріЋрІ│рѕ╗рѕйрѕЇ ріЦріЊ рѕїрѕјрЅйріЋ рЅарЅ░рѕ╗рѕѕ рѕЂріћрЅ│ ріЦріЋрІхрѕерІ│ рІГрѕерІ│ріЏрѕЇрЇб рѕѕрѕўрЅђрїарѕЇ ріЦрЅБріГрІјріЋ ріарѕхрЅ░рІФрІерЅхрІјріЋ рІГрѕхрїАріЋрЇб ріарѕЂріЋ рІФрїѕріЎрЅх рѕўрѕЇрѕх ріЦріЋрІ┤рЅх ріљрІЇ?"
}
THANKS_FOR_FEEDBACK = {
    "en": "Thank you for your feedback! If you have another question, just type it below.",
    "am": "рѕхрѕѕ ріарѕхрЅ░рІФрІерЅхрІј ріЦріЊрѕўрѕ░рїЇріЊрѕѕріЋ! рѕїрѕІ рїЦрІФрЅё ріФрѕѕрІјрЅх ріЦрЅБріГрІјріЋ"
}

HELP_BTNS = ["РЮЊ Help", "РЮЊ ріЦрѕГрІ│рЅ│"]
NEW_CHAT_BTNS = ["Рюе Start New Chat", "Рюе ріарІ▓рѕх рІЇрІГрІГрЅх рїђрѕЮрѕГ"]
FAQ_BTNS = ["­ЪњГ FAQ & Help", "­ЪњГ рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй"]
END_CHAT_BTNS = ["­Ъџф Exit Chat", "­Ъџф рІЇрІГрІГрЅх рІЇрїБ"]

# FAQ Categories (for internal organization only)
FAQ_CATEGORIES = ["pregnancy", "menstruation", "contraception", "sti", "puberty", "relationships"]

# FAQ Data based on the spreadsheet
FAQ_DATA = {
    "pregnancy": {
        "en": [
            ("Can a girl get pregnant the first time she has sex?", "Yes. Pregnancy can happen any time a male's sperm meets a female's eggРђћeven during the first time a girl has sex."),
            ("Can you get pregnant during your period?", "Yes, though it's less likely. Sperm can live inside the body for up to 5 days, and some women have shorter cycles, making pregnancy possible."),
            ("How can I tell if I'm pregnant without a test?", "Some common signs include missed periods, nausea, breast tenderness, and tiredness. However, only a pregnancy test can confirm for sure."),
            ("What are safe ways to avoid pregnancy?", "Family planning methods include natural tracking of your cycle, condoms, implants, and other methods provided by health professionals. Visit a clinic to learn what's available in your area."),
            ("Is it dangerous for a teenager to get pregnant?", "Yes, early pregnancies can be risky for both mother and baby. It's important to delay pregnancy until the body is more mature and there is enough support.")
        ],
        "am": [
            ("ріаріЋрІ▓рЅх рѕ┤рЅх рѕѕрѕўрїђрѕўрѕфрІФ рїірІю рІѕрѕ▓рЅЦ рѕхрЅхрЇѕрїйрѕЮ рѕЏрѕГрїѕрІЮ рЅхрЅйрѕІрѕѕрЅй?", "ріарІјрЇБ рІерІѕріЋрІх рІерІўрѕГ рЇЇрѕг ріерѕ┤рЅх ріЦріЋрЅЂрѕІрѕЇ рїІрѕГ рЅарѕџрїѕріЊріЮрЅарЅх рїірІю рѕЂрѕЅ ріЦрѕГрїЇрІЮріЊ рѕіріерѕ░рЅх рІГрЅйрѕІрѕЇРђћрѕ┤рЅх рѕЇрїЁ рѕѕрѕўрїђрѕўрѕфрІФ рїірІю рІѕрѕ▓рЅЦ рѕхрЅхрЇѕрїйрѕЮ рЅбрѕєріЋрЇб"),
            ("рЅарІѕрѕГ ріарЅарЅБ рІѕрЅЁрЅх ріЦрѕГрїЅрІЮ рѕўрѕєріЋ рІГрЅ╗рѕІрѕЇ?", "рІФріљрѕ░ ріЦрІхрѕЇ рЅбрѕєріЋрѕЮ ріарІј рѕірѕєріЋ рІГрЅйрѕІрѕЇрЇб рІерІѕріЋрІх рІерІўрѕГ рЇЇрѕг рЅарѕ░рІЇріљрЅх рІЇрѕхрїЦ ріЦрѕхріе 5 рЅђріЊрЅх рѕірЅєрІГ рІГрЅйрѕІрѕЇрЇБ ріЦріЊрѕЮ ріаріЋрІ│ріЋрІх рѕ┤рЅХрЅй рІ░рїЇрѕъ ріарїГрѕГ рІерІѕрѕГ ріарЅарЅБ рІЉрІ░рЅх ріарѕІрЅИрІЇрЇБ рІГрѕЁрѕЮ ріЦрѕГрїЇрІЮріЊріЋ рІФрѕхріерЅхрѕІрѕЇрЇб"),
            ("рІФрѕѕ рѕЮрѕГрѕўрѕФ ріЦрѕГрїЅрІЮ рѕўрѕєріћріЋ ріЦріЋрІ┤рЅх рѕЏрІѕрЅЁ ріЦрЅйрѕІрѕѕрѕЂ?", "ріаріЋрІ│ріЋрІх рІерЅ░рѕѕрѕўрІ▒ рѕЮрѕЇріГрЅХрЅй рІФрѕўрѕѕрїА рІерІѕрѕГ ріарЅарЅБрІјрЅйрЇБ рѕЏрЅЁрѕѕрѕйрѕѕрѕйрЇБ рІерїАрЅх рѕўрїаріЋріерѕГ ріЦріЊ рІхріФрѕЮ рІФріФрЅхрЅ│рѕЅрЇб рѕєріќрѕЮрЇБ рІеріЦрѕГрїЇрІЮріЊ рѕЮрѕГрѕўрѕФ рЅЦрЅ╗ ріљрІЇ рЅаріЦрѕГрїЇрїаріЮріљрЅх рѕЏрѕерїІрїѕрїЦ рІерѕџрЅйрѕѕрІЇрЇб"),
            ("ріЦрѕГрїЇрІЮріЊ ріаріЋрІ│рІГрЇѕрїарѕГ рІерѕџрІФрІ░рѕГрїЅ рїЦрѕЕ рѕўріЋрїѕрІХрЅй рѕЮріЋрІхріЋ ріЊрЅИрІЇ?", "рІерЅцрЅ░рѕ░рЅЦ ріЦрЅЁрІх рІўрІ┤рІјрЅй рІерІѕрѕГ ріарЅарЅБ рІЉрІ░рЅхрІјріЋ рѕўріерЅ│рЅ░рѕЇрЇБ рі«ріЋрІХрѕЮріЋрЇБ рѕўріерѕІріерІФрІјрЅйріЋ ріЦріЊ рЅарїцріЊ рЅБрѕѕрѕЎрІФрІјрЅй рІерѕџрѕ░рїА рѕїрѕјрЅй рІўрІ┤рІјрЅйріЋ рѕўрїарЅђрѕЮріЋ рІФріФрЅхрЅ│рѕЅрЇб рЅаріаріФрЅБрЅбрІј рІФрѕѕрІЇріЋ рѕѕрѕЏрІѕрЅЁ ріарЅЁрѕФрЅбрІФрІј рІФрѕѕріЋ ріГрѕіріњріГ рІГрїјрЅЦріЎрЇб"),
            ("рЅаріарѕЦрѕФрІјрЅ╣ рІЋрІхрѕю рѕІрІГ рѕѕрѕЮрЅхрїѕріЮ рѕЇрїЁ ріЦрѕГрїЅрІЮ рѕўрѕєріЋ ріарІ░рїѕріЏ ріљрІЇ?", "ріарІјріЋрЇБ рЅарѕЇрїђріљрЅх рІерѕџрЇѕрїарѕГ ріЦрѕГрїЇрІЮріЊ рѕѕріЦріЊрЅхрѕЮ рѕєріљ рѕѕрѕЋрЇЃріЋ ріарІ░рїѕріЏ рѕірѕєріЋ рІГрЅйрѕІрѕЇрЇб рѕ░рІЇріљрЅх рІерЅарѕѕрїа ріЦрѕхріфрЅарѕхрѕЇ ріЦріЊ рЅарЅѓ рІхрїІрЇЇ ріЦрѕхріфріќрѕГ рІхрѕерѕх ріЦрѕГрїЇрІЮріЊріЋ рѕЏрІўрїЇрІерЅх ріарѕхрЇѕрѕІрїі ріљрІЇрЇб")
        ]
    },
    "menstruation": {
        "en": [
            ("Is it normal to miss a period sometimes?", "Yes, especially in the first few years after periods start. Stress, illness, or changes in weight can also affect your cycle. If you miss your period for more than 2 months, consider speaking to a health professional."),
            ("How much bleeding is normal during a period?", "Most people lose about 2-3 tablespoons of blood during their entire period. Heavy bleeding that soaks through a pad or tampon every hour for several hours needs medical attention."),
            ("Can I exercise during my period?", "Yes! Exercise can actually help reduce cramps and improve your mood during your period. Just use the protection you're comfortable with."),
            ("Why do I get cramps during my period?", "Cramps happen because your uterus contracts to shed its lining. This is normal, but severe pain that interferes with daily activities should be discussed with a healthcare provider.")
        ],
        "am": [
            ("ріаріЋрІ│ріЋрІх рїірІю рІерІѕрѕГ ріарЅарЅБ рѕўрІўрїЇрІерЅх рЅ░рѕѕрѕўрІ░ ріљрІЇ?", "ріарІјрЇБ рЅарЅ░рѕѕрІГ рІерІѕрѕГ ріарЅарЅБ ріерЅ░рїђрѕўрѕе рЅаріІрѕІ рЅарѕўрїђрѕўрѕфрІФрІјрЅ╣ рІЊрѕўрЅ│рЅхрЇб рїГріЋрЅђрЅхрЇБ рѕЁрѕўрѕЮ рІѕрІГрѕЮ рІеріГрЅЦрІ░рЅх рѕѕрІЇрїдрЅй рІерІѕрѕГ ріарЅарЅБ рІЉрІ░рЅхрІјріЋ рѕірїјрІ▒ рІГрЅйрѕІрѕЅрЇб рІерІѕрѕГ ріарЅарЅБрІјрЅхріЋ ріе2 рІѕрѕГ рЅарѕІрІГ ріФрѕўрѕѕрїЦрІјрЅхрЇБ ріерїцріЊ рЅБрѕѕрѕЎрІФ рїІрѕГ рѕЏріЊрїѕрѕГ рІФрѕхрЅАрЅарЅхрЇб"),
            ("рЅарІѕрѕГ ріарЅарЅБ рІѕрЅЁрЅх рѕЮріЋ рІФрѕЁрѕЇ рІ░рѕЮ рѕўрЇЇрѕ░рѕх рІерЅ░рѕѕрѕўрІ░ ріљрІЇ?", "ріарЅЦрІЏріърЅ╣ рѕ░рІјрЅй рЅарїарЅЁрѕІрѕІ рІерІѕрѕГ ріарЅарЅБ рІѕрЅЁрЅх рІѕрІ░ 2-3 рІерѕ╗рІГ рѕЏріЋріфрІФ рІФрѕЁрѕЇ рІ░рѕЮ рІФрїБрѕЅрЇб рЅарІерѕ░рІЊрЅ▒ рѕѕрЅЦрІЎ рѕ░рІЊрЅ│рЅх рІѕрїБрЅХрЅйріЋ рІѕрІГрѕЮ рЅ│рѕЮрЇќріЋріЋ рІерѕџріљріерѕГ ріерЅБрІх рІ░рѕЮ рѕўрЇЇрѕ░рѕх рІерѕЋріГрѕЮріЊ ріЦріЋріГрЅЦріФрЅц рІФрѕхрЇѕрѕЇрїѕрІІрѕЇрЇб"),
            ("рЅарІѕрѕГ ріарЅарЅБ рІѕрЅЁрЅх рІеріаріФрѕЇ рЅЦрЅЃрЅх ріЦріЋрЅЁрѕхрЅЃрѕ┤ рѕЏрІхрѕерїЇ ріЦрЅйрѕІрѕѕрѕЂ?", "ріарІј! рІеріаріФрѕЇ рЅЦрЅЃрЅх ріЦріЋрЅЁрѕхрЅЃрѕ┤ рЅарѕ│рЅЁрЅ│ рІѕрЅЁрЅх рІ░рѕерЅхріЋ рѕірЅђріЋрѕх ріЦріЊ рѕхрѕюрЅхрІјріЋ рѕірІФрѕ╗рѕйрѕЇ рІГрЅйрѕІрѕЇрЇб рІерѕџрѕўрЅИрІјрЅхріЋ рїЦрЅарЅЃ рЅЦрЅ╗ рІГрїарЅђрѕЎрЇб"),
            ("рЅарІѕрѕГ ріарЅарЅБ рІѕрЅЁрЅх рѕѕрѕЮріЋ рѕєрІ┤ рІГрЅєрїБрѕЇ?", "рІерѕєрІх рЅЂрѕГрїарЅх рІерѕџріерѕ░рЅ░рІЇ рѕЏрѕЁрЇђріЋрІј рЅарІ░рѕЎ рІЇрѕхрїЦ рІФрѕѕрІЇріЋ рѕйрЇІріЋ рѕѕрѕЏрѕхрІѕрїѕрІх рЅарѕџрІФрѕИрѕЏрЅЁрЅЁрЅарЅх рїірІю ріљрІЇрЇб рІГрѕЁ рІерЅ░рѕѕрѕўрІ░ ріљрІЇрЇБ ріљрїѕрѕГ рїЇріЋ рІЋрѕѕрЅ│рІі ріЦріЋрЅЁрѕхрЅЃрѕ┤рІјрЅйріЋ рІерѕџрІФрІ░ріЊрЅЁрЇЇ ріерЅБрІх рѕЁрѕўрѕЮ ріерїцріЊ ріарїарЅБрЅарЅЁ ріарЅЁрѕФрЅб рїІрѕГ рѕўрІѕрІФрІерЅх ріарѕѕрЅарЅхрЇб")
        ]
    },
    "contraception": {
        "en": [
            ("What contraceptive methods are available?", "There are many options including condoms, birth control pills, implants, IUDs, and injectable contraceptives. Consult a healthcare provider to find what's best for you."),
            ("Are condoms effective?", "Yes, when used correctly, condoms are about 98% effective at preventing pregnancy and also protect against STIs."),
            ("Can I use emergency contraception?", "Emergency contraception can be used up to 72-120 hours after unprotected sex, depending on the type. The sooner it's taken, the more effective it is.")
        ],
        "am": [
            ("рѕЮріЋ рІЊрІГріљрЅх рІерІѕрѕірІх рѕўріерѕІріерІФ рІўрІ┤рІјрЅй ріарѕЅ?", "рі«ріЋрІХрѕЮрЇБ рІерІѕрѕірІх рѕўріерѕІріерІФ ріГріњріќрЅйрЇБ рІѕрЅ░рЅхрЅ░ріГрІјрЅйрЇБ IUDs ріЦріЊ рІерѕўрѕГрЇї рѕўріерѕІріерІФрІјрЅйріЋ рїерѕЮрѕ« рЅЦрІЎ ріарѕЏрѕФрї«рЅй ріарѕЅрЇб рѕѕріЦрѕГрѕхрІј рѕЮріЋ ріЦріЋрІ░рѕџрѕ╗рѕЇ рѕѕрѕЏрІѕрЅЁ ріерїцріЊ ріарїарЅБрЅарЅЁ ріарЅЁрѕФрЅб рїІрѕГ рІГрѕўріГрѕЕрЇб"),
            ("рі«ріЋрІХрѕърЅй рІЇрїцрЅ│рѕЏ ріЊрЅИрІЇ?", "ріарІјрЇБ рЅарЅхріГріГрѕЇ рѕ▓рїарЅђрѕЎрЇБ рі«ріЋрІХрѕърЅй ріЦрѕГрїЇрІЮріЊріЋ ріерѕўріерѕІріерѕЇ ріе98% рІЇрїцрЅ│рѕЏ ріЊрЅИрІЇ ріЦріЊрѕЮ ріеSTIs рІГрїарЅЦрЅЂрІјрЅ│рѕЇрЇб"),
            ("рІхріЋрїѕрЅ░ріЏ рѕўріерѕІріерІФ рѕўрїарЅђрѕЮ ріЦрЅйрѕІрѕѕрѕЂ?", "рІхріЋрїѕрЅ░ріЏ рѕўріерѕІріерІФ ріерїЦрЅарЅЃ рІФрѕѕ рІѕрѕ▓рЅЦ рЅаріІрѕІ ріЦрѕхріе 72-120 рѕ░рІЊрЅ│рЅх рѕірїарЅђрѕЎ рІГрЅйрѕІрѕЅрЇБ ріарІГріљрЅ▒ріЋ рЅарѕўрІѕрѕ░ріЋрЇб рЅарЇЇрїЦріљрЅх рѕ▓рІѕрѕ░рІх рІерЅарѕѕрїа рІЇрїцрЅ│рѕЏ ріљрІЇрЇб")
        ]
    },
    "sti": {
        "en": [
            ("How can I protect myself from STIs?", "Use condoms consistently, limit sexual partners, get regular testing, and communicate openly with partners about sexual health."),
            ("What are common STI symptoms?", "Symptoms can include unusual discharge, burning during urination, genital sores, or itching. However, many STIs have no symptoms, so regular testing is important."),
            ("Can STIs be treated?", "Many STIs can be cured with proper treatment, especially bacterial infections. Viral infections can be managed with medication.")
        ],
        "am": [
            ("ріеSTIs ріЦріЋрІ┤рЅх рѕўрїарЅарЅЁ ріЦрЅйрѕІрѕѕрѕЂ?", "рі«ріЋрІХрѕърЅйріЋ рЅарѕЏрІФрЅІрѕГрїЦ рІГрїарЅђрѕЎрЇБ рІерІѕрѕ▓рЅЦ ріарїІрѕ«рЅйріЋ рІГрїѕрІхрЅАрЇБ рѕўрІ░рЅаріЏ рѕЮрѕГрѕўрѕФ рІФрІхрѕГрїЅрЇБ ріЦріЊ рѕхрѕѕ рїЙрЅ│рІі рїцріЊ ріеріарїІрѕ«рЅй рїІрѕГ рЅарїЇрѕЇрїй рІГріљрїІрїѕрѕЕрЇб"),
            ("рІерЅ░рѕѕрѕўрІ▒ рІеSTI рѕЮрѕЇріГрЅХрЅй рѕЮріЋрІхріЋ ріЊрЅИрІЇ?", "рѕЮрѕЇріГрЅХрЅй рІФрѕЇрЅ░рѕѕрѕўрІ░ рЇѕрѕ│рѕйрЇБ рѕйріЋрЅх рІѕрЅЁрЅх рѕўрЅЃрїарѕЇрЇБ рІерІѕрѕірІх ріаріФрѕІрЅх рЅЂрѕхрѕјрЅй рІѕрІГрѕЮ рѕЏрѕ│ріеріГріЋ рѕірІФріФрЅхрЅ▒ рІГрЅйрѕІрѕЅрЇб рѕєріќрѕЮрЇБ рЅЦрІЎ STIs рѕЮріЋрѕЮ рѕЮрѕЇріГрЅх рІерѕІрЅИрІЇрѕЮрЇБ рѕхрѕѕрІџрѕЁ рѕўрІ░рЅаріЏ рѕЮрѕГрѕўрѕФ ріарѕхрЇѕрѕІрїі ріљрІЇрЇб"),
            ("STIs рѕірЅ│ріерѕЎ рІГрЅйрѕІрѕЅ?", "рЅЦрІЎ STIs рЅарЅхріГріГрѕѕріЏ рѕЋріГрѕЮріЊ рѕірЇѕрІѕрѕ▒ рІГрЅйрѕІрѕЅрЇБ рЅарЅ░рѕѕрІГ рІерЅБріГрЅ┤рѕфрІФ рібріЋрЇїріГрѕйріќрЅйрЇб рІерЅФрІГрѕерѕх рібріЋрЇїріГрѕйріќрЅй рЅарѕўрІхріЃріњрЅх рѕірЅ░рІ│рІ░рѕЕ рІГрЅйрѕІрѕЅрЇб")
        ]
    },
    "puberty": {
        "en": [
            ("When does puberty start?", "Puberty typically begins between ages 8-13 for girls and 9-14 for boys, but timing varies widely and is normal."),
            ("What changes happen during puberty?", "Physical changes include growth spurts, voice changes, development of sexual characteristics, and emotional changes."),
            ("Is irregular periods normal during puberty?", "Yes, it's very common for periods to be irregular for the first few years after they start.")
        ],
        "am": [
            ("рІеріаріФрѕЇ ріЦрІхрїѕрЅх рѕўрЅ╝ рІГрїђрѕўрѕФрѕЇ?", "рІеріаріФрѕЇ ріЦрІхрїѕрЅх рЅарЅ░рѕѕрѕЮрІХ рѕѕрѕ┤рЅх рѕЇрїєрЅй рЅа8-13 ріЦрІхрѕў ріЦріЊ рѕѕрІѕріЋрІх рѕЇрїєрЅй рЅа9-14 ріЦрІхрѕю рІГрїђрѕўрѕФрѕЇрЇБ ріљрїѕрѕГ рїЇріЋ рїірІюрІЇ рЅарѕ░рЇірІЇ рІГрѕѕрІФрІФрѕЇ ріЦріЊ рІерЅ░рѕѕрѕўрІ░ ріљрІЇрЇб"),
            ("рЅаріаріФрѕЇ ріЦрІхрїѕрЅх рІѕрЅЁрЅх рѕЮріЋ рѕѕрІЇрїдрЅй рІГріерѕ░рЅ│рѕЅ?", "ріаріФрѕІрІі рѕѕрІЇрїдрЅй рЇѕрїБріЋ ріЦрІхрїѕрЅхрЇБ рІерІхрѕЮрЇЁ рѕѕрІЇрїдрЅйрЇБ рІерІѕрѕ▓рЅЦ рЅБрѕЁрѕфрІФрЅх ріЦрІхрїѕрЅх ріЦріЊ рѕхрѕюрЅ│рІі рѕѕрІЇрїдрЅйріЋ рІФріФрЅхрЅ│рѕЅрЇб"),
            ("рЅаріаріФрѕЇ ріЦрІхрїѕрЅх рІѕрЅЁрЅх рѕўрІ░рЅаріЏ рІФрѕЇрѕєріљ рІерІѕрѕГ ріарЅарЅБ рІерЅ░рѕѕрѕўрІ░ ріљрІЇ?", "ріарІјрЇБ рІерІѕрѕГ ріарЅарЅБ ріерЅ░рїђрѕўрѕе рЅаріІрѕІ рѕѕрѕўрїђрѕўрѕфрІФрІјрЅ╣ рїЦрЅѓрЅх рІЊрѕўрЅ│рЅх рѕўрІ░рЅаріЏ рІФрѕЇрѕєріљ рѕўрѕєріЋ рЅарїБрѕЮ рІерЅ░рѕѕрѕўрІ░ ріљрІЇрЇб")
        ]
    },
    "relationships": {
        "en": [
            ("How do I know if I'm ready for a relationship?", "You should feel emotionally mature, able to communicate well, and understand the responsibilities that come with relationships."),
            ("What is consent?", "Consent means freely agreeing to sexual activity. It must be clear, ongoing, and can be withdrawn at any time."),
            ("How can I communicate better with my partner?", "Practice active listening, express your feelings honestly, respect boundaries, and discuss important topics openly.")
        ],
        "am": [
            ("рѕѕрїЇріЋріЎріљрЅх рІЮрїЇрїЂ рѕўрѕєріћріЋ ріЦріЋрІ┤рЅх рѕЏрІѕрЅЁ ріЦрЅйрѕІрѕѕрѕЂ?", "рѕхрѕюрЅ│рІі рЅарЅЦрѕхрѕѕрЅх рѕўрѕ░рѕЏрЅхрЇБ рЅарІ░ріЋрЅЦ рѕўрїѕріЊріўрЅх ріЦріЊ ріерїЇріЋріЎріљрЅХрЅй рїІрѕГ рІерѕџрѕўрїА рѕЃрѕІрЇіріљрЅХрЅйріЋ рѕўрѕерІ│рЅх ріарѕѕрЅЦрІјрЅхрЇб"),
            ("рЇѕрЅЃрІх рѕЮріЋрІхріЋ ріљрІЇ?", "рЇѕрЅЃрІх рѕЏрѕѕрЅх рѕѕрІѕрѕ▓рЅЦ ріЦріЋрЅЁрѕхрЅЃрѕ┤ рЅаріљрЇЃ рѕўрѕхрѕЏрѕЏрЅх рѕЏрѕѕрЅх ріљрІЇрЇб рїЇрѕЇрїйрЇБ рЅђрїБрІГ рѕўрѕєріЋ ріарѕѕрЅарЅхрЇБ ріЦріЊ рЅарѕЏріЋріЏрІЇрѕЮ рїірІю рѕірІѕрѕ░рІх рІГрЅйрѕІрѕЇрЇб"),
            ("ріеріарїІрѕг рїІрѕГ рЅарЅ░рѕ╗рѕѕ рѕЂріћрЅ│ ріЦріЋрІ┤рЅх рѕўрїѕріЊріўрЅх ріЦрЅйрѕІрѕѕрѕЂ?", "ріЋрЅЂ рѕЏрІ│рѕўрїЦріЋ рІГрѕѕрѕЏрѕўрІ▒рЇБ рѕхрѕюрЅХрЅ╗рЅйрѕЂріЋ рЅарЅ│рѕЏріЮріљрЅх рІГрїЇрѕѕрї╣рЇБ рІѕрѕ░ріќрЅйріЋ рІФріГрЅЦрѕЕрЇБ ріЦріЊ ріарѕхрЇѕрѕІрїі рѕГрІЋрѕХрЅйріЋ рЅарїЇрѕЇрїй рІГрІѕрІФрІЕрЇб")
        ]
    }
}

@sync_to_async
def get_user_session(telegram_id):
    # Simple get_or_create without select_for_update to avoid transaction issues
    # The concurrent processing at the application level handles race conditions
    session, _ = UserSession.objects.get_or_create(
        telegram_user_id=telegram_id, 
        is_active=True,
        defaults={'language': 'en'}  # Set default language if creating new session
    )
    return session

async def show_faq_sections(update, context, lang):
    """Show FAQ section selection"""
    sections_msg = {
        "en": "­ЪЊІ **FAQ - Choose a Topic**\n\nPlease select the topic you'd like to learn about:",
        "am": "­ЪЊІ **рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй - рѕГрІЋрѕх рІГрѕЮрѕерїА**\n\nрѕўрѕЏрѕГ рІерѕџрЇѕрѕЇрїЅрЅхріЋ рѕГрІЋрѕх рІГрѕЮрѕерїА:"
    }
    
    # Create inline keyboard for sections
    keyboard = []
    section_titles = {
        "pregnancy": {"en": "­Ъц▒ Pregnancy & Family Planning", "am": "­Ъц▒ ріЦрѕГрїЇрІЮріЊ ріЦріЊ рІерЅцрЅ░рѕ░рЅЦ ріЦрЅЁрІх"},
        "menstruation": {"en": "­ЪЕИ Menstruation (Periods)", "am": "­ЪЕИ рІерІѕрѕГ ріарЅарЅБ"},
        "contraception": {"en": "­ЪЏА№ИЈ Contraception & Birth Control", "am": "­ЪЏА№ИЈ рІѕрѕірІх рѕўріерѕІріерІФ"},
        "sti": {"en": "­Ъда STIs & Sexual Health", "am": "­Ъда рїЙрЅ│рІі рЅ░рѕІрѕІрЇі рЅарѕйрЅ│рІјрЅй"},
        "puberty": {"en": "­Ъї▒ Puberty & Development", "am": "­Ъї▒ рІеріаріФрѕЇ ріЦрІхрїѕрЅх"},
        "relationships": {"en": "­ЪњЋ Relationships & Sexuality", "am": "­ЪњЋ рІерЇЇрЅЁрѕГ рїЇріЋріЎріљрЅх"}
    }
    
    for section_id in FAQ_CATEGORIES:
        if section_id in section_titles:
            section_name = section_titles[section_id][lang]
            keyboard.append([InlineKeyboardButton(section_name, callback_data=f"FAQ_SECTION|{section_id}")])
    
    # Add back to menu button
    back_text = {"en": "­ЪћЎ Back to Menu", "am": "­ЪћЎ рІѕрІ░ рѕЏрІЇрїФ рЅ░рѕўрѕѕрѕх"}
    keyboard.append([InlineKeyboardButton(back_text[lang], callback_data="FAQ_BACK_TO_MENU")])
    
    await update.message.reply_text(
        sections_msg[lang],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    context.user_data['state'] = STATE_FAQ_SECTION



async def show_section_qa(update, context, section_id, lang):
    """Show all Q&A pairs for a section"""
    if section_id not in FAQ_DATA:
        await update.callback_query.edit_message_text("РЮї Section not found. Please try again.")
        return
    
    # Get section title
    section_titles = {
        "pregnancy": {"en": "­Ъц▒ Pregnancy & Family Planning", "am": "­Ъц▒ ріЦрѕГрїЇрІЮріЊ ріЦріЊ рІерЅцрЅ░рѕ░рЅЦ ріЦрЅЁрІх"},
        "menstruation": {"en": "­ЪЕИ Menstruation (Periods)", "am": "­ЪЕИ рІерІѕрѕГ ріарЅарЅБ"},
        "contraception": {"en": "­ЪЏА№ИЈ Contraception & Birth Control", "am": "­ЪЏА№ИЈ рІѕрѕірІх рѕўріерѕІріерІФ"},
        "sti": {"en": "­Ъда STIs & Sexual Health", "am": "­Ъда рїЙрЅ│рІі рЅ░рѕІрѕІрЇі рЅарѕйрЅ│рІјрЅй"},
        "puberty": {"en": "­Ъї▒ Puberty & Development", "am": "­Ъї▒ рІеріаріФрѕЇ ріЦрІхрїѕрЅх"},
        "relationships": {"en": "­ЪњЋ Relationships & Sexuality", "am": "­ЪњЋ рІерЇЇрЅЁрѕГ рїЇріЋріЎріљрЅх"}
    }
    
    section_name = section_titles.get(section_id, {}).get(lang, "FAQ")
    
    # Build message with all Q&A pairs
    qa_msg = f"­ЪЊІ **{section_name}**\n\n"
    
    questions = FAQ_DATA[section_id][lang]
    for i, (question, answer) in enumerate(questions, 1):
        qa_msg += f"**{i}. {question}**\n\nРюЁ {answer}\n\n{'Рћђ' * 30}\n\n"
    
    # Create navigation
    keyboard = []
    back_to_topics_text = {"en": "­ЪћЎ Back to Topics", "am": "­ЪћЎ рІѕрІ░ рѕГрІЋрѕХрЅй рЅ░рѕўрѕѕрѕх"}
    back_to_menu_text = {"en": "­ЪЈа Main Menu", "am": "­ЪЈа рІІріЊ рѕЏрІЇрїФ"}
    
    keyboard.append([InlineKeyboardButton(back_to_topics_text[lang], callback_data="FAQ_BACK_TO_SECTIONS")])
    keyboard.append([InlineKeyboardButton(back_to_menu_text[lang], callback_data="FAQ_BACK_TO_MENU")])
    
    await update.callback_query.edit_message_text(
        qa_msg,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle FAQ callback queries"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    session = await get_user_session(telegram_id)
    lang = session.language
    data = query.data
    
    if data == "FAQ_BACK_TO_MENU":
        # Go back to main menu
        menu_msg = {"en": "Back to main menu:", "am": "рІѕрІ░ рІІріЊрІЇ рѕЏрІЇрїФ:"}
        await query.edit_message_text(menu_msg[lang])
        await context.bot.send_message(
            chat_id=telegram_id,
            text="....",
            reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
        )
        context.user_data['state'] = STATE_QUESTION
        return
    
    elif data == "FAQ_BACK_TO_SECTIONS":
        # Show sections again
        await show_faq_sections_callback(query, context, lang)
        return
    
    elif data.startswith("FAQ_SECTION|"):
        # Show Q&A pairs for selected section
        section_id = data.split("|")[1]
        await show_section_qa(update, context, section_id, lang)
        return

async def show_faq_sections_callback(query, context, lang):
    """Show FAQ sections for callback"""
    sections_msg = {
        "en": "­ЪЊІ **FAQ - Choose a Topic**\n\nPlease select the topic you'd like to learn about:",
        "am": "­ЪЊІ **рЅ░рІ░рїІрїІрѕџ рїЦрІФрЅёрІјрЅй - рѕГрІЋрѕх рІГрѕЮрѕерїА**\n\nрѕўрѕЏрѕГ рІерѕџрЇѕрѕЇрїЅрЅхріЋ рѕГрІЋрѕх рІГрѕЮрѕерїА:"
    }
    
    # Create inline keyboard for sections
    keyboard = []
    section_titles = {
        "pregnancy": {"en": "­Ъц▒ Pregnancy & Family Planning", "am": "­Ъц▒ ріЦрѕГрїЇрІЮріЊ ріЦріЊ рІерЅцрЅ░рѕ░рЅЦ ріЦрЅЁрІх"},
        "menstruation": {"en": "­ЪЕИ Menstruation (Periods)", "am": "­ЪЕИ рІерІѕрѕГ ріарЅарЅБ"},
        "contraception": {"en": "­ЪЏА№ИЈ Contraception & Birth Control", "am": "­ЪЏА№ИЈ рІѕрѕірІх рѕўріерѕІріерІФ"},
        "sti": {"en": "­Ъда STIs & Sexual Health", "am": "­Ъда рїЙрЅ│рІі рЅ░рѕІрѕІрЇі рЅарѕйрЅ│рІјрЅй"},
        "puberty": {"en": "­Ъї▒ Puberty & Development", "am": "­Ъї▒ рІеріаріФрѕЇ ріЦрІхрїѕрЅх"},
        "relationships": {"en": "­ЪњЋ Relationships & Sexuality", "am": "­ЪњЋ рІерЇЇрЅЁрѕГ рїЇріЋріЎріљрЅх"}
    }
    
    for section_id in FAQ_CATEGORIES:
        if section_id in section_titles:
            section_name = section_titles[section_id][lang]
            keyboard.append([InlineKeyboardButton(section_name, callback_data=f"FAQ_SECTION|{section_id}")])
    
    # Add back to menu button
    back_text = {"en": "­ЪћЎ Back to Menu", "am": "­ЪћЎ рІѕрІ░ рѕЏрІЇрїФ рЅ░рѕўрѕѕрѕх"}
    keyboard.append([InlineKeyboardButton(back_text[lang], callback_data="FAQ_BACK_TO_MENU")])
    
    await query.edit_message_text(
        sections_msg[lang],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    context.user_data['state'] = STATE_FAQ_SECTION

@sync_to_async
def save_user_message(session, text, lang):
    return ChatMessage.objects.create(
        session=session, sender='user', message=text, language=lang, llm_context_json=None
    )

@sync_to_async
def save_bot_message(session, text, lang, context_json=None):
    return ChatMessage.objects.create(
        session=session, sender='bot', message=text, language=lang, llm_context_json=context_json
    )

@sync_to_async
def get_recent_chat_history(session, limit=CHAT_HISTORY_LIMIT):
    # Use select_related to optimize database queries
    # Increased limit from 4 to 20 for much better conversation memory
    # This gives the bot context of last 10 user questions + 10 bot responses
    return list(ChatMessage.objects.filter(session=session)
                .select_related('session')
                .order_by('-timestamp')[:limit][::-1])

@sync_to_async
def get_last_bot_message(session):
    return ChatMessage.objects.filter(session=session, sender='bot').order_by('-timestamp').first()

@sync_to_async
def save_feedback(chat_message, rating_code):
    return Feedback.objects.create(chat_message=chat_message, rating=rating_code)

@sync_to_async
def count_user_questions(session):
    return ChatMessage.objects.filter(session=session, sender='user').count()

@sync_to_async
def get_user_session_with_stats(telegram_id):
    """
    Optimized function to get user session and question count in one query.
    Reduces database calls for concurrent users.
    """
    from django.db.models import Count, Q
    
    session, created = UserSession.objects.get_or_create(
        telegram_user_id=telegram_id, 
        is_active=True,
        defaults={'language': 'en'}
    )
    
    # Get question count separately
    question_count = ChatMessage.objects.filter(
        session=session, 
        sender='user'
    ).count()
    
    return session, question_count, created

@sync_to_async
def deactivate_session(session):
    session.is_active = False
    session.save()

@sync_to_async
def clear_chat_history(session):
    """Clear all chat messages for a session while keeping user profile"""
    ChatMessage.objects.filter(session=session).delete()

@sync_to_async  
def set_language(session, lang):
    """Update session language"""
    session.language = lang
    session.save()

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    session = await get_user_session(telegram_id)
    lang = session.language
    state = context.user_data.get('state')
    user_input = update.message.text.strip()

    # --- Check if user is in feedback state ---
    if state == STATE_FEEDBACK:
        # User must provide feedback before continuing - show feedback options again
        rating_keyboard = [
            [InlineKeyboardButton(label, callback_data=f"RATING|{code}")]
            for label, code in choices_for_buttons(RATING_CHOICES, lang)
        ]
        rating_keyboard.append([InlineKeyboardButton(START_OVER_BTN[lang], callback_data="FEEDBACK_SETTINGS")])
        await update.message.reply_text(
            FEEDBACK_PROMPT[lang],
            reply_markup=InlineKeyboardMarkup(rating_keyboard)
        )
        return

    # --- Settings via menu ---
    if user_input in [START_OVER_BTN["en"], START_OVER_BTN["am"]]:
        # Don't deactivate session - just show language change options
        keyboard = [
            [
                InlineKeyboardButton("English ­ЪЄ║­ЪЄИ", callback_data="LANG_CHANGE|en"),
                InlineKeyboardButton("ріарѕЏрѕГріЏ ­ЪЄф­ЪЄ╣", callback_data="LANG_CHANGE|am"),
            ]
        ]
        settings_msg = {
            "en": "РџЎ№ИЈ Choose your preferred language:\n\nNote: This will change the language for all future responses.",
            "am": "РџЎ№ИЈ рІерѕџрЇѕрѕЇрїЅрЅхріЋ рЅІріЋрЅІ рІГрѕЮрѕерїА:\n\nрѕЏрѕхрЅ│рІѕрѕ╗: рІГрѕЁ рѕѕрІѕрІ░рЇірЅ▒ рѕЂрѕЅрѕЮ рѕЮрѕІрѕЙрЅй рЅІріЋрЅІ рІГрЅђрІГрѕФрѕЇрЇб"
        }
        await update.message.reply_text(
            settings_msg[lang],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = STATE_LANGUAGE_CHANGE
        return

    # --- Help via menu ---
    if user_input in HELP_BTNS:
        help_msg = {
            "en": (
                "­ЪЉІ This is an SRH help bot. Type your question or choose an option from the menu.\n\n"
                "Use 'Settings' to change your profile, or 'End Chat' to clear your data."
            ),
            "am": (
                "­ЪЉІ рІГрѕЁ рІеSRH ріЦрѕГрІ│рЅ│ рЅдрЅх ріљрІЇрЇб рїЦрІФрЅёрІјріЋ рІФрЅЦрѕЕ рІѕрІГрѕЮ ріерѕЏрІЇрїФрІЇ рІЇрѕхрїЦ рІГрѕЮрѕерїАрЇб\n\n"
                "'рЅЁріЋрЅЦрѕГ' рІерѕџрѕѕрІЇріЋ рѕўрїѕрѕѕрїФрІјріЋ рѕѕрѕўрЅђрІерѕГрЇБ 'рІЇрІГрІГрЅх рІФрЅЂрѕЎ' рІерѕџрѕѕрІЇріЋ рІЇрѕѓрЅЦрІјріЋ рѕѕрѕўрѕ░рѕерІЮ рІГрїарЅђрѕЎрЇб"
            )
        }
        await update.message.reply_text(
            help_msg[lang],
            reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
        )
        return

    # --- New Chat via menu ---
    if user_input in NEW_CHAT_BTNS:
        # Clear only the chat history but keep user profile
        await clear_chat_history(session)
        new_chat_msg = {
            "en": "­Ъњг Starting a new conversation! Your profile settings are preserved. What would you like to ask?",
            "am": "­Ъњг ріарІ▓рѕх рІЇрІГрІГрЅх рїђрѕЮрѕеріЊрѕЇ! рІеріЦрѕГрѕхрІј рѕўрїѕрѕѕрїФ рЅЁріЋрЅЦрѕ«рЅй рЅ░рїарЅЦрЅђрІІрѕЇрЇб рѕЮріЋ рѕўрїарІерЅЁ рІГрЇѕрѕЇрїІрѕЅ?"
        }
        await update.message.reply_text(
            new_chat_msg[lang],
            reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
        )
        context.user_data['state'] = STATE_QUESTION
        return

    # --- FAQ via menu ---
    if user_input in FAQ_BTNS:
        await show_faq_sections(update, context, session.language)
        return

    # --- End Chat via menu ---
    if user_input in END_CHAT_BTNS:
        await deactivate_session(session)
        end_msg = {
            "en": "РюЁ Your chat session has ended and your data was cleared. Type /start to begin again!",
            "am": "РюЁ рІЇрІГрІГрЅхрІј рЅ░рІўрїЇрЅирѕЇрЇб рѕўрїђрѕўрѕфрІФ рѕѕрѕЏрІхрѕерїЇ /start рІГрї╗рЇЅ!"
        }
        await update.message.reply_text(
            end_msg[lang],
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['state'] = STATE_LANGUAGE
        return

    # --- Normal Q&A flow ---
    if state == STATE_QUESTION:
        user_question = user_input
        
        # Check if question is about homosexuality and reject if so
        should_reject, rejection_message = should_reject_question(user_question, lang)
        if should_reject:
            await update.message.reply_text(
                rejection_message,
                reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
            )
            return
        
        try:
            # Save user message and get chat history concurrently
            user_msg_task = save_user_message(session, user_question, lang)
            chat_history_task = get_recent_chat_history(session)
            
            # Wait for both operations to complete
            await user_msg_task
            chat_history = await chat_history_task

            # Language-specific instructions
            if lang == 'am':
                length_instruction = "ріЦрЅБріГрІј рѕўрѕЇрѕхрІјріЋ рЅаріарїГрѕГ ріЦріЊ рЅарЅхріГріГрѕЇ рЅаріарѕЏрѕГріЏ рЅЦрЅ╗ рІГрѕўрѕЇрѕ▒рЇб рЅа3500 рЅЂрѕЮрЇі рІЇрѕхрїЦ рІГрїѕрЅАрЇб"
                question_label = "рІерЅ░рїарЅЃрѕџ рїЦрІФрЅё"
                language_instruction = (
                    "рЅаріарѕЏрѕГріЏ рЅІріЋрЅІ рЅЦрЅ╗ рІГрѕўрѕЇрѕ▒рЇб рѕЮріЋрѕЮ ріЦріЋрїЇрѕірІЮріЏ рЅЃрѕІрЅх рІѕрІГрѕЮ рѕљрѕерїјрЅй ріарІГрїарЅђрѕЎрЇб "
                    "рІеріарѕЏрѕГріЏ рЇірІ░рѕІрЅхріЋ рЅЦрЅ╗ рІГрїарЅђрѕЎрЇб "
                    "рЅ░рїарЅЃрѕџрІЇ ріарѕЏрѕГріЏ рЅ░ріЊрїІрѕф ріљрІЇ ріЦріЊ рЅаріарѕЏрѕГріЏ рЅЦрЅ╗ рІГрѕерІ│рѕЇрЇб"
                )
            else:
                length_instruction = "Please answer concisely, completely, and within 3500 characters."
                question_label = "User's question"
                language_instruction = (
                    "Respond ONLY in English. Do not use any Amharic words or phrases. "
                    "Use only English alphabet and words. "
                    "The user is an English speaker and understands only English."
                )

            # Safety reminders
            medication_safety = {
                'en': "Рџа№ИЈ MEDICATION SAFETY: As SRH expert consultant, explain medications educationally but always add 'but before taking any medication, you need a doctor's prescription.'",
                'am': "Рџа№ИЈ рІерѕўрІхріЃріњрЅх рІ░рѕЁріЋріљрЅх: ріЦріЋрІ░ SRH рЅБрѕѕрѕЎрІФ ріарѕЏріФрѕф рѕхрѕѕ рѕўрІхріЃріњрЅХрЅй рЅхрѕЮрѕЁрѕГрЅ│рІі рІФрЅЦрѕФрѕЕ ріљрїѕрѕГ рїЇріЋ рѕЂрѕЇрїірІю 'рїЇріЋ рѕЏріЋріЏрІЇріЋрѕЮ рѕўрІхріЃріњрЅх ріерѕўрІЇрѕ░рІхрІј рЅарЇірЅх рІерѕљріфрѕЮ рІХріГрЅ░рѕГ рЅхрІЋрІЏрІЮ рІФрѕхрЇѕрѕЇрїЇрІјрЅ│рѕЇ' рЅЦрѕѕрІЇ рІФріГрѕЅрЇб"
            }
            
            scope_reminder = {
                'en': "Рџа№ИЈ SCOPE: Only answer SRH-related questions. Politely redirect non-SRH questions.",
                'am': "Рџа№ИЈ рІѕрѕ░ріЋ: рѕхрѕѕ рѕхріљрЅ░рІІрѕЇрІХ рїцріЊ рїЦрІФрЅёрІјрЅй рЅЦрЅ╗ рІГрѕўрѕЇрѕ▒рЇб рѕїрѕјрЅй рїЦрІФрЅёрІјрЅйріЋ рЅаріаріГрЅЦрѕ«рЅх рІГрѕ│рѕ│рЅ▒рЇб"
            }
            
            response_guidelines = {
                'en': "Рџа№ИЈ CONTEXTUAL ENGAGEMENT: Keep answers moderate length (4-5 sentences), supportive and encouraging. Continue the conversation naturally without unnecessary greetings. End with ONE simple, relevant question based on context to keep conversation engaging. Never ask multiple questions - only ONE question per response.",
                'am': "Рџа№ИЈ рЅБрІЇрІх рѕІрІГ рІерЅ░рѕўрѕ░рѕерЅ░ рѕўрѕ│рЅ░рЇЇ: рѕўрѕЇрѕХрЅйріЋ рѕўрїаріљріЏ рѕГрІЮрѕўрЅх (4-5 рІЊрѕерЇЇрЅ░ ріљрїѕрѕГ)рЇБ рІхрїІрЇІрІі ріЦріЊ ріарЅарѕерЅ│рЅй рІФрІхрѕГрїЅрЇб рЅђрїБрІГ рІЇрІГрІГрЅх рѕ▓рѕєріЋ рѕ░рѕІрѕЮрЅ│ ріарІГрІхрїѕрѕЎрЇб рЅаріарІЇрІх рѕІрІГ рЅарѕўрѕўрѕхрѕерЅх ріЋрїЇрїЇрѕЕріЋ ріарѕ│рЅ│рЇі рѕѕрѕЏрІхрѕерїЇ ріаріЋрІх рЅђрѕІрѕЇ ріЦріЊ рЅ░рІЏрѕЏрїЁ рїЦрІФрЅё рЅарѕўрїерѕерѕх рІФрїаріЊрЅЁрЅЂрЇб рЅЦрІЎ рїЦрІФрЅёрІјрЅйріЋ ріарІГрїарІГрЅЂ - рЅаріаріЋрІх рѕЮрѕІрѕй рІЇрѕхрїЦ ріаріЋрІх рїЦрІФрЅё рЅЦрЅ╗рЇб"
            }
            
            ethiopian_context = {
                'en': "Рџа№ИЈ ETHIOPIAN CONTEXT: You are operating in Ethiopia. Consider Ethiopian culture, healthcare system (health posts, health centers, hospitals), and conservative values. Recommend local Ethiopian health facilities when professional help is needed. For questions about homosexuality, respect Ethiopian conservative cultural and religious values without promoting such behaviors.",
                'am': "Рџа№ИЈ рІерібрЅхрІ«рїхрІФ ріарІЇрІх: ріЦрѕГрѕхрІј рЅарібрЅхрІ«рїхрІФ рІЇрѕхрїЦ ріЦрІерѕ░рѕЕ ріљрІјрЅхрЇб рІерібрЅхрІ«рїхрІФріЋ рЅБрѕЁрѕЇрЇБ рІерїцріЊ рѕ▓рѕхрЅ░рѕЮ (рїцріЊ рїБрЅбрІФрІјрЅйрЇБ рїцріЊ рігрѕІрІјрЅйрЇБ рѕєрѕхрЇњрЅ│рѕјрЅй)рЇБ ріЦріЊ рІѕрїЇ ріарїЦрЅБрЅѓ ріЦрѕ┤рЅХрЅйріЋ рїЇрѕЮрЅх рІЇрѕхрїЦ рІФрѕхрїѕрЅАрЇб рІерЇЋрѕ«рЇїрѕйріЊрѕЇ ріЦрѕГрІ│рЅ│ рѕ▓рІФрѕхрЇѕрѕЇрїЇ рІерібрЅхрІ«рїхрІФ рІерїцріЊ рЅ░рЅІрѕЏрЅхріЋ рІГрѕЮріерѕЕрЇб рѕхрѕѕ рїЇрЅЦрѕе-рѕ░рІХрѕЏрІіріљрЅх рїЦрІФрЅёрІјрЅй рѕІрІГ рІерібрЅхрІ«рїхрІФріЋ рІѕрїЇ ріарїЦрЅБрЅѓ рЅБрѕЁрѕІрІі ріЦріЊ рѕЃрІГрѕЏріќрЅ│рІі ріЦрѕ┤рЅХрЅйріЋ рІФріерЅЦрѕЕрЇб"
            }
                
            prompt = (
                f"{await build_gemini_context(session, chat_history)}\n\n"
                f"{question_label}: {user_question}\n\n"
                f"MEDICATION SAFETY: {medication_safety[lang]}\n"
                f"QUESTION SCOPE: {scope_reminder[lang]}\n"
                f"ETHIOPIAN CONTEXT: {ethiopian_context[lang]}\n"
                f"CONTEXTUAL ENGAGEMENT: {response_guidelines[lang]}\n"
                f"LANGUAGE REQUIREMENT: {language_instruction}\n"
                f"RESPONSE INSTRUCTION: {length_instruction}"
            )

            # Get AI response (this includes its own error handling now)
            answer = await ask_gemini(prompt)
            
            final_answer = smart_truncate(answer)
            
            # Save bot message and count questions concurrently
            save_msg_task = save_bot_message(session, final_answer, lang, context_json={"prompt": prompt})
            count_task = count_user_questions(session)
            
            # Send response to user immediately (don't wait for DB operations)
            await update.message.reply_text(
                final_answer,
                reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
            )
            
            # Now wait for DB operations to complete
            await save_msg_task
            num_questions = await count_task
            
            # Perform intent classification at 5th, 10th, 20th, 40th, 80th... conversations (runs in background)
            try:
                classification_task = perform_intent_classification(session, lang)
                # Don't await this to avoid blocking the user response
                asyncio.create_task(classification_task)
                logger.debug(f"Started intent classification task for session {session.id}")
            except Exception as e:
                logger.warning(f"Failed to start intent classification: {e}")
            
            # Perform emotion detection at 5th, 20th, 80th, 320th... conversations (runs in background)
            try:
                emotion_task = perform_emotion_detection(session, lang)
                # Don't await this to avoid blocking the user response
                asyncio.create_task(emotion_task)
                logger.debug(f"Started emotion detection task for session {session.id}")
            except Exception as e:
                logger.warning(f"Failed to start emotion detection: {e}")
            
            # Perform risk assessment at 3rd, 6th, 12th, 24th, 48th... conversations (runs in background)
            try:
                risk_task = perform_risk_assessment(session, num_questions)
                # Don't await this to avoid blocking the user response
                asyncio.create_task(risk_task)
                logger.debug(f"Started risk assessment task for session {session.id}")
            except Exception as e:
                logger.warning(f"Failed to start risk assessment: {e}")
            
            # Perform myth detection every 2 messages starting from 2nd (runs in background)
            try:
                myth_task = perform_myth_detection(session, num_questions)
                # Don't await this to avoid blocking the user response
                asyncio.create_task(myth_task)
                logger.debug(f"Started myth detection task for session {session.id}")
            except Exception as e:
                logger.warning(f"Failed to start myth detection: {e}")
            
            if should_ask_feedback(num_questions):
                rating_keyboard = [
                    [InlineKeyboardButton(label, callback_data=f"RATING|{code}")]
                    for label, code in choices_for_buttons(RATING_CHOICES, lang)
                ]
                rating_keyboard.append([InlineKeyboardButton(START_OVER_BTN[lang], callback_data="FEEDBACK_SETTINGS")])
                await update.message.reply_text(
                    FEEDBACK_PROMPT[lang],
                    reply_markup=InlineKeyboardMarkup(rating_keyboard)
                )
                context.user_data['state'] = STATE_FEEDBACK
            else:
                context.user_data['state'] = STATE_QUESTION
                
        except Exception as e:
            # Enhanced error handling for concurrent scenarios
            logger.error(f"Error processing question for user {telegram_id}: {e}")
            
            # Language-specific error messages
            if lang == 'am':
                error_msg = "рІГрЅЁрѕГрЅ│рЇБ ріарѕЂріЋ рїЦрІФрЅёрІјріЋ рѕўрѕўрѕѕрѕх ріарѕЇрЅ╗рѕЇріЕрѕЮрЇб ріЦрЅБріГрІј ріЦріЋрІ░рїѕріЊ рІГрѕъріГрѕЕрЇб"
            else:
                error_msg = "Sorry, I couldn't process your request right now. Please try again."
            
            await update.message.reply_text(
                error_msg,
                reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
            )

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    telegram_id = query.from_user.id
    session = await get_user_session(telegram_id)
    lang = session.language

    if query.data.startswith("RATING|"):
        rating_code = query.data.split("|")[1]
        last_bot_message = await get_last_bot_message(session)
        if last_bot_message:
            await save_feedback(last_bot_message, rating_code)
        # Create a combined message with feedback thanks and menu
        menu_text = {
            "en": f"{THANKS_FOR_FEEDBACK['en']}\n\nYou can continue asking questions below:",
            "am": f"{THANKS_FOR_FEEDBACK['am']}\n\nріерІџрѕЁ рЅарЅ│рЅй рїЦрІФрЅёрІјрЅйріЋ рѕўрЅђрїарѕЇ рІГрЅйрѕІрѕЅрЇА"
        }
        await query.edit_message_text(
            menu_text[lang]
        )
        # Show menu keyboard in a separate message
        await context.bot.send_message(
            chat_id=telegram_id,
            text="­Ъњг",  # Use an emoji instead of empty text
            reply_markup=ReplyKeyboardMarkup(MENU_BTNS[lang], resize_keyboard=True, one_time_keyboard=False)
        )
        context.user_data['state'] = STATE_QUESTION
        return
    
    elif query.data == "FEEDBACK_SETTINGS":
        # Handle the Settings button from feedback
        keyboard = [
            [
                InlineKeyboardButton("English ­ЪЄ║­ЪЄИ", callback_data="LANG_CHANGE|en"),
                InlineKeyboardButton("ріарѕЏрѕГріЏ ­ЪЄф­ЪЄ╣", callback_data="LANG_CHANGE|am"),
            ]
        ]
        settings_msg = {
            "en": "РџЎ№ИЈ Choose your preferred language:\n\nNote: This will change the language for all future responses.",
            "am": "РџЎ№ИЈ рІерѕџрЇѕрѕЇрїЅрЅхріЋ рЅІріЋрЅІ рІГрѕЮрѕерїА:\n\nрѕЏрѕхрЅ│рІѕрѕ╗: рІГрѕЁ рѕѕрІѕрІ░рЇірЅ▒ рѕЂрѕЅрѕЮ рѕЮрѕІрѕЙрЅй рЅІріЋрЅІ рІГрЅђрІГрѕФрѕЇрЇб"
        }
        await query.edit_message_text(
            settings_msg[lang],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = STATE_LANGUAGE_CHANGE
        return

async def handle_language_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle language change from Settings menu"""
    query = update.callback_query
    await query.answer()
    telegram_id = query.from_user.id
    session = await get_user_session(telegram_id)
    
    if query.data.startswith("LANG_CHANGE|"):
        new_lang = query.data.split("|")[1]
        old_lang = session.language
        
        # Update session language while preserving all other profile data
        await set_language(session, new_lang)
        
        # Confirmation message in the NEW language
        confirmation_msg = {
            "en": f"РюЁ Language changed to English!\n\nYour profile settings (age, gender, interests) have been preserved. You can continue chatting normally.",
            "am": f"РюЁ рЅІріЋрЅІ рІѕрІ░ ріарѕЏрѕГріЏ рЅ░рЅђрІГрѕ»рѕЇ!\n\nрІеріЦрѕГрѕхрІј рѕўрїѕрѕѕрїФ рЅЁріЋрЅЦрѕ«рЅй (ріЦрІхрѕюрЇБ рїЙрЅ│рЇБ рЇЇрѕІрїјрЅХрЅй) рЅ░рїарЅЦрЅђрІІрѕЇрЇб рЅарѕўрІ░рЅаріЏ рѕЂріћрЅ│ рѕЏрІЇрѕФрЅх рѕўрЅђрїарѕЇ рІГрЅйрѕІрѕЅрЇб"
        }
        
        await query.edit_message_text(confirmation_msg[new_lang])
        
        # Show menu in the NEW language
        await context.bot.send_message(
            chat_id=telegram_id,
            text="....",
            reply_markup=ReplyKeyboardMarkup(MENU_BTNS[new_lang], resize_keyboard=True, one_time_keyboard=False)
        )
        context.user_data['state'] = STATE_QUESTION
